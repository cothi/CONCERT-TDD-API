datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// model User{
//     id String @id @default(uuid())
//     email String @unique
//     createAt DateTime @default(now())
//     updateAt DateTime @updatedAt
// }


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userPoint UserPoint?
  payments  Payment[]
}

model UserPoint {
  id        String   @id @default(uuid())
  userId    String   @unique
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, createdAt])
}

model Payment {
  id        String      @id @default(uuid())
  userId    String
  amount    Decimal
  type      PaymentType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, createdAt])
}

enum PaymentType {
    CHARGE
    TICKET_PURCHASE
    REFUND
}

model Concert {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  concertDates ConcertDate[]

  @@map("concerts")
}

model ConcertDate {
  id                 String   @id @default(uuid())
  concertId          String
  date               DateTime
  totalSeat          Int
  availableSeatCount Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  concert            Concert  @relation(fields: [concertId], references: [id])
  seats              Seat[]

  @@index([concertId])
  @@map("concert_dates")
}

model Seat {
  id            String     @id @default(uuid())
  seatNumber    Int
  price         Decimal    @db.Decimal(10, 2)
  status        SeatStatus
  concertDateId String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  concertDate   ConcertDate @relation(fields: [concertDateId], references: [id])

  @@index([concertDateId])
  @@map("seats")
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
}